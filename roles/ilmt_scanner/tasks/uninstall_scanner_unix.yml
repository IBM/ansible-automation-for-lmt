---
- name: "Check whether ILMT Scanner is installed on UNIX/Linux endpoints"
  stat:
    path: "{{ lmt_scanner_path_unix }}/config/endpoint_id.txt"
  register: ilmt_scanner_installed_unix

- name: "Read endpoint id value block on UNIX/Linux endpoints"
  block:
    - name: "Read endpoint id value on UNIX/Linux endpoints"
      command: "cat \"{{ lmt_scanner_path_unix }}/config/endpoint_id.txt\" "
      register: unix_endpoint_id_for_delete

    - name: "Set endpoint_id_for_delete variable on UNIX/Linux endpoints"
      set_fact:
        endpoint_id_for_delete: "{{ unix_endpoint_id_for_delete.stdout }}"
  when: ilmt_scanner_installed_unix.stat.exists and (remove_computer_from_server | default(false)) and lmt_server_token is defined

- name: "Leave config backup block on UNIX/Linux endpoints"
  block:
    - name: "Uninstall scanner block on UNIX/Linux endpoints"
      block:
        - name: "Create a config_backup backup directory on UNIX/Linux endpoints"
          file:
            path: "{{ lmt_scanner_path_unix }}/config_backup/"
            state: directory
            mode: '0755'

        - name: "Copy endpoint_id and scan configs to config_backup directory on UNIX/Linux endpoints"
          copy:
            src: "{{ lmt_scanner_path_unix }}/config/{{ item }}"
            dest: "{{ lmt_scanner_path_unix }}/config_backup/"
            remote_src: true
            mode: preserve
          with_items:
            - endpoint_id.txt
            - sw_config.xml
            - isotag_config.xml
            - slmtag_config.xml

        - name: "Check whether uuid.dat file exists on UNIX/Linux endpoints"
          stat:
            path: "{{ lmt_scanner_path_unix }}/config/uuid.dat"
          register: uuid_file_exists

        - name: "Copy uuid.dat to config_backup directory on UNIX/Linux endpoints"
          copy:
            src: "{{ lmt_scanner_path_unix }}/config/uuid.dat"
            dest: "{{ lmt_scanner_path_unix }}/config_backup/"
            remote_src: true
          when: uuid_file_exists.stat.exists

        - name: "Check whether vmman_host_id file exists on UNIX/Linux endpoints"
          stat:
            path: "{{ lmt_scanner_path_unix }}/config/vmman_host_id"
          register: vmman_host_id_file_exists

        - name: "Copy vmman_host_id to config_backup directory on UNIX/Linux endpoints"
          copy:
            src: "{{ lmt_scanner_path_unix }}/config/vmman_host_id"
            dest: "{{ lmt_scanner_path_unix }}/config_backup/"
            remote_src: true
          when: vmman_host_id_file_exists.stat.exists

        - name: "Check whether computer_properties.yml file exists on UNIX/Linux endpoints"
          stat:
            path: "{{ lmt_scanner_path_unix }}/config/computer_properties.yml"
          register: computer_properties_file_exists

        - name: "Copy computer_properties.yml to config_backup directory on UNIX/Linux endpoints"
          copy:
            src: "{{ lmt_scanner_path_unix }}/config/computer_properties.yml"
            dest: "{{ lmt_scanner_path_unix }}/config_backup/"
            remote_src: true
          when: computer_properties_file_exists.stat.exists

        - name: "Run script to uninstall ILMT Scanner from UNIX/Linux endpoints"
          command: "./uninstall.sh"
          args:
            chdir: "{{ lmt_scanner_path_unix }}"
          async: "{{ lmt_scanner_setup_timeout }}"
          poll: 5
      when: ilmt_scanner_installed_unix.stat.exists

    - name: "Capture files to delete from UNIX/Linux endpoints"
      find:
        paths: "{{ lmt_scanner_path_unix }}"
        file_type: any
        excludes:
          - "config_backup"
      register: found_files

    - name: "Delete all data from ILMT scanner folder except config backup from UNIX/Linux endpoints"
      shell: "rm -rf \"{{ item.path }}\""
      with_items: "{{ found_files['files'] }}"
      loop_control:
        label: "{{ item.path | basename }}"
  when: (leave_config_backup | default(false))

- name: "Uninstall scanner block on UNIX/Linux endpoints"
  block:
    - name: "Run script to uninstall ILMT Scanner from UNIX/Linux endpoints"
      command: "./uninstall.sh"
      args:
        chdir: "{{ lmt_scanner_path_unix }}"
      async: "{{ lmt_scanner_setup_timeout }}"
      poll: 5
      when: ilmt_scanner_installed_unix.stat.exists

    - name: "Delete ILMT folder from UNIX/Linux endpoints"
      shell: "rm -rf \"{{ lmt_scanner_path_unix }}\""
  when: not (leave_config_backup | default(false))
